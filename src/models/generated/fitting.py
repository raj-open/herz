# generated by datamodel-codegen:
#   filename:  schema-fitting.yaml

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, ConfigDict, Field


class FittedInfoNormalisation(BaseModel):
    """
    Data structure to store information about (pre)normalisation.

    The parameters

    - period = `T`
    - intercept = `c`
    - gradient = `m`
    - scale = `s`

    are defined such that

    - The time-series of the cycle `x` occurs on `[t₀, t₀ + T]` for some `t₀`.
    - `z(t) := (x(t₀ + Tt) - (c + mt))/s` for `t ∈ [0, T]`
      satisfies `z(0) = z(1) = 0` (drift-removal)
      and (L²-norm) ‖z‖ = 1.
    """

    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    period: float = 1.0
    intercept: float = 0.0
    gradient: float = 0.0
    scale: float = 1.0


class FittedInfoPoly(BaseModel):
    """
    Data structure to store information about fitted polynomials.
    """

    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    coefficients: list[float] = Field(
        default=[], description="Coefficients of polynomial model."
    )


class FittedInfoTrig(BaseModel):
    """
    Parameters of a fitted model
    ```
    f(t) = A + R·cos(ω(t - t₀))
    ```
    """

    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    hshift: float
    hscale: float
    vshift: float
    vscale: float
    drift: float


class FittedInfoExp(BaseModel):
    """
    Parameters of a fitted model
    ```
    P(V) = A + B·exp(β·V)
    ```
    """

    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    hscale: float
    vshift: float
    vscale: float


class EnumSign(int, Enum):
    """
    Enumeration of classification of signs of (possibly complex) numbers
    """

    ZERO = 0
    REAL_NEGATIVE = -1
    REAL_POSITIVE = 1
    NON_ZERO = 2


class EnumExtremePoints(str, Enum):
    """
    Enumeration of extreme point types.
    """

    PEAK = "peak"
    TROUGH = "trough"
