# generated by datamodel-codegen:
#   filename:  schema-app.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class RepoInfo(BaseModel):
    """
    Basic infos about repo
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str
    description: str
    version: str
    homepage: AnyUrl


class MatchingConfig(BaseModel):
    """
    Designates to each data series the name of a special point
    to be used for alignment of the data series.
    These can then be used as a starting points.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pressure: str
    volume: str


class PolyCritCondition(BaseModel):
    """
    A condition to force on fitted polynomial of the form:
    - The `n`-th derivative has `h` critical points.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    derivative: int = Field(..., ge=0)
    num_critical: int = Field(..., alias='num-critical', ge=0)


class PolyDerCondition(BaseModel):
    """
    A condition to force on fitted polynomial of the form:

    - The `n`-th derivative at time point `t` must be `0`.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    derivative: int = Field(..., ge=0)
    time: float


class TimeInterval(BaseModel):
    """
    Defines end points of a time-interval (`a` to `b`).
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    a: float
    b: float


class MarkerSettings(BaseModel):
    """
    Settings for plotting special points.

    - `size` - <int> size of marker
    - `colour` - <string> colour of marker, can be either a name or of the form
        `'rgba(<float>,<float>,<float>,<float>)'`, `'hsla(<int>,<float>%,<float>%,<float>)'`, etc.
    - `symbol` - <string> symbool for marker, see <https://plotly.com/python/marker-style>.
    - (optional) `text` - <string> symbol for text inside the plot
    - `text-position` - <string> where text is to be positioned,

      Values: 'top|middle|bottom left|center|right'
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    size: int = 2
    colour: str = 'black'
    symbol: str = 'x'
    text: str = None
    text_position: str = Field('top center', alias='text-position')


class EnumCriticalPoints(str, Enum):
    """
    Enumeration of critical point types.
    """

    UNKNOWN = 'UNKNOWN'
    ZERO = 'ZERO'
    MINIMUM = 'MINIMUM'
    MAXIMUM = 'MAXIMUM'
    LOCAL_MINIMUM = 'LOCAL-MINIMUM'
    LOCAL_MAXIMUM = 'LOCAL-MAXIMUM'
    INFLECTION = 'INFLECTION'


class AppInfo(RootModel[Any]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Any


class PolyIntCondition(BaseModel):
    """
    A condition to force on fitted polynomial of the form:

    - The integral over the union of the time intervals must be `0`.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    times: List[TimeInterval] = Field(..., min_length=1)


class SpecialPointsSpec(BaseModel):
    """
    A single condition used to defined special point in terms of

    - position relative to other special points,
    - criticality of an n'th derivative

    NOTE: The 'before' / 'after' conditions are defined purely in terms of the peak-to-peak cycle.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    derivative: int = Field(0, description="Order of the n'th derivative condition.", ge=0)
    kind: EnumCriticalPoints = Field(
        ..., description="Kind of n'th derivative condition: (local) min/max."
    )
    reuse: bool = Field(
        False,
        description='Whether the recognised point is to be reused for the 2nd round of fitting.',
    )
    strict: bool = Field(
        True,
        description='Whether the point is to occur strictly inside the cycle.\n\nDefault: `true`.\n\nNOTE: Only set to `false` for a time point that is the peak value.',
    )
    after: List[str] = Field(
        ...,
        description='The currently specified point has to occur after this list of named points.',
    )
    before: List[str] = Field(
        ...,
        description='The currently specified point has to occur before this list of named points.',
    )


class PolynomialConfig(BaseModel):
    """
    Setting on for polynomial fitting for cycles within a time-series.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pressure: List[Union[PolyCritCondition, PolyDerCondition, PolyIntCondition]]
    volume: List[Union[PolyCritCondition, PolyDerCondition, PolyIntCondition]]


class SpecialPointsConfig(BaseModel):
    """
    Configuration of special points.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    name: str = Field(..., description='Name of special point.')
    ignore: bool = Field(False, description='Option to suppress plotting.')
    found: bool = Field(
        False, description='Option to mark whether point successfully computed.'
    )
    time: float = Field(
        -1, description='Time co-ordinate of special point (initially normalised to `[0, 1]`).'
    )
    value: float = Field(-1, description='Value of special point.')
    spec: Optional[SpecialPointsSpec] = Field(
        None, description='Optional specifications for computation of special point.'
    )
    marker: Optional[MarkerSettings] = Field(None, description='Settings for plot marker.')


class SpecialPointsConfigs(BaseModel):
    """
    Configuration of special points.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pressure: Dict[str, SpecialPointsConfig]
    volume: Dict[str, SpecialPointsConfig]


class Settings(BaseModel):
    """
    Primary settings
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    units: Dict[str, str] = Field(..., description='Standard units for physical conversion.')
    matching: MatchingConfig
    polynomial: PolynomialConfig = Field(
        ..., description='Conditions for initial fitting (polynomial) curves to raw data.'
    )
    points: SpecialPointsConfigs = Field(
        ..., description='Specifications used to compute special points.'
    )


class AppConfig(BaseModel):
    """
    Data model for all parts of the app configuration.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    info: AppInfo
    settings: Settings = Field(..., description='Primary settings')
