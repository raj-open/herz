# generated by datamodel-codegen:
#   filename:  schema-user.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Combine(BaseModel):
    """
    Parameter options for combining time series.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    dt: float = Field(..., gt=0.0)
    t_max: Optional[float] = Field(None, alias='T-max', gt=0.0)
    unit: str


class Cycles(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    remove_bad: bool = Field(
        False,
        alias='remove-bad',
        description="Option to remove 'bad' parts at start/end of cycles.",
    )


class Font(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    family: str = 'Tahoma'
    size: int = Field(12, description='Size of font (in entire plot) in `pt`.')
    size_title: int = Field(14, alias='size-title', description='Size of title font in `pt`.')
    size_legend: int = Field(
        10, alias='size-legend', description='Size of legend font in `pt`.'
    )


class PathToDirString(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='Data type for a string to be a path to a directory.',
        pattern='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*$',
    )


class FileString(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='Data type for a string to be the base name of a file.',
        pattern='^[^\\\\\\/]*\\.[^\\\\\\/]+$',
    )


class PathToFileString(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='Data type for a string to be a path to a file.',
        pattern='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*\\.[^\\\\\\/]+$',
    )


class PythonImportString(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Data type for a string to constitute an import 'path' in python.",
        pattern='^(\\.\\.|\\.)[\\w\\_]+(\\.[\\w\\_]+)*$',
    )


class EnumType(str, Enum):
    """
    Enumeration of settings for log level.
    """

    BOOLEAN = 'bool'
    DOUBLE = 'float'
    INTEGER = 'int'
    STRING = 'str'


class DataTypeQuantity(BaseModel):
    """
    Structure for physical quantity as column
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    name: Any = Field(..., description='Name of column in file.')
    type: EnumType = Field(EnumType.DOUBLE, description='Data type (float, int, etc.)')
    unit: str = Field(..., description='Physical unit as string')


class DataTypeColumn(BaseModel):
    """
    Structure for physical quantity for outputs.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    name: str = Field(..., description='Desired name of column in file.')
    quantity: str = Field(
        ...,
        description='(Root) name of physical quantity.\nE.g. for a column for "fitted pressure"\nuse `quantity="pressure"`.',
    )
    key: str = Field(
        ...,
        description='Name of column in internal data frame.\nE.g. for a column for "fitted pressure"\nuse `key="pressure[fit]"`.',
    )
    type: EnumType = Field(EnumType.DOUBLE, description='Data type (float, int, etc.)')
    unit: str = Field(..., description='Physical unit as string')


class EnumProgrammeMode(str, Enum):
    """
    Enumeration of endpoints for executing main programme.
    """

    VERSION = 'version'
    REQUESTS = 'requests'


class EnumEndpoint(str, Enum):
    """
    Enumeration of endpoints for requests
    """

    UNKNOWN = 'UNKNOWN'
    RIGHT_VENTRICLE = 'RIGHT-VENTRICLE'


class EnumFittingMode(str, Enum):
    """
    Enumeration of settings for log level.
    """

    SINGLE = 'SINGLE'
    AVERAGE = 'AVERAGE'


class Fit(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    mode: EnumFittingMode = Field(
        EnumFittingMode.AVERAGE,
        description='Whether to fit for each cycle individually,\nor to fit for all simultaneously (average).',
    )


class UserProcess(BaseModel):
    """
    Options for process steps.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    combine: Combine = Field(..., description='Parameter options for combining time series.')
    cycles: Cycles
    fit: Fit


class Table(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    path: Optional[PathToDirString] = None
    sep: str
    decimal: str


class Plot(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    path: Optional[PathToDirString] = None
    legend: bool = False
    font: Font


class UserOutput(BaseModel):
    """
    Options for outputs
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: Optional[str] = Field(None, description='Name of case.')
    quantities: List[DataTypeColumn] = Field(
        ..., description='User settings for output quantities.', min_length=1
    )
    table: Table
    plot: Plot


class DataTimeSeries(BaseModel):
    """
    Structure for time series.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    path: PathToDirString = Field(..., description='Path to file containing time series.')
    sep: str = Field(';', description='Delimiter for columns used in file.')
    decimal: str = Field('.', description='Symbol for decimals used in file.')
    skip: Union[int, List[int], str] = Field(
        [],
        description='Which row indexes to skip.\nEither provide\n\n- a string of a lambda function (mapping integers to boolean values)\n- an integer, indicating how many rows to skip from the top\n- an array\n\nNoted that row numbers are **0-based**!',
        examples={
            'simple': {'value': 3, 'summary': 'Rows `0,1,2` will be skipped.'},
            'function': {
                'value': '`lambda i: i % 3 == 1`',
                'summary': 'Skips every 3rd rwo starting from row-index 1',
            },
            'array': {
                'value': [0, 1, 2, 4, 5],
                'summary': 'In this case in the file\n- extra headers are on lines `0, 1, 2``,\n- headers are on row `3`\n- rows 4 and 5 contain further skippable content\n\nNOTE: negative values will be ignored.',
            },
        },
    )
    time: DataTypeQuantity = Field(..., description='Column name for time.')
    value: DataTypeQuantity = Field(..., description='Column name for value.')


class UserData(BaseModel):
    """
    Options for structure of data files.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pressure: DataTimeSeries
    volume: DataTimeSeries


class RequestConfig(BaseModel):
    """
    User settings for a single case of data.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ignore: bool = Field(False, description='Whether or not to skip the case.')
    endpoint: EnumEndpoint
    label: str = Field(
        ...,
        description='Label used to refer to case and generate output files.\nNOTE: may not contain spaces.',
        pattern='^\\S+$',
    )
    name: str = Field(..., description='Name of case (can be used e.g. in titles of plots).')
    data: UserData
    process: UserProcess
    output: UserOutput


class RequestsConfig(BaseModel):
    """
    Data model for all parts of the user configuration.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    requests: List[RequestConfig] = Field([], description='List of settings for each case.')
