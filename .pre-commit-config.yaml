# ----------------------------------------------------------------
# Automates pre-commit actions,
# e.g. linting, prettify, removal of artefacts/sensitive data, etc.
#
# NOTE: To use this run
#
# 1. python3 -m pip install pre-commit
# 2. python3 -m pre-commit install # in the repository
#
# After completing 2, upon every commit the hook will be called.
# ----------------------------------------------------------------
default_install_hook_types:
  - commit-msg
  - pre-commit
  - pre-push

fail_fast: true

repos:
  - repo: local
    hooks:

    - id: commit-message
      name: Commit Message
      description: |-
        This hook ensures that commit messages conform to the schema.
      # SIMPLER METHOD, but allows any branch name:
      # language: pygrep
      # args: [ '--negate' ]
      # entry: '^\S+(-\S+)* > \S+(-\S+)*:\s+\S+(\s*\S+)*$'
      # MORE COMPLICATED, but checks branch names:
      language: system
      args: []
      entry: |-
        bash -c '
            message="$( cat .git/COMMIT_EDITMSG )";

            branch="$( git rev-parse --abbrev-ref HEAD )"
            # get 2nd line of git history
            line=""
            while read line_; do
                line="${line_}";
            done <<< "$( git show-branch -a | head -n2 )";
            # NOTE: line is of form
            # ! [branch] message
            # Can normally extract using sed, but does not work inside bash -c.
            line="${line//[/####}";
            line="${line//]/####}";
            parts=( $( echo "$line" | tr "####" "\n" ) );
            parent="${parts[1]}"
            pattern="^${branch} > ${parent}: [^[:space:]]+([[:space:]]*[^[:space:]]+)*"
            expected="${branch} > ${parent}: {your message}";

            if ( echo "${message}" | grep -Eq "${pattern}" ); then
              echo "commit message matches expected:";
              echo "";
              echo "    ${expected}";
              echo "";
              exit 0;
            else
              echo "commit message failed to match";
              echo "";
              echo "    ${expected}";
              echo "";
              exit 1;
            fi
        '
      verbose: true
      stages: [ commit-msg ]

  - repo: local
    hooks:

    - id: lint
      name: Lint files
      description: |-
        This hook performs linting on files.
      files: '^(src|tests|notebooks|examples)/.*\.(py|ipynb)$'
      pass_filenames: true
      language: system
      args: []
      entry: |-
        bash -c '
          just githook-lint "$0";
        '
      verbose: true
      stages: [ pre-commit ]

    - id: test-py
      name: Test python files
      description: |-
        This hook performs checks to see if test in this file are green.
      files: '^tests/(tests_[^/]+/)*tests_[^/]+\.py$'
      pass_filenames: true
      language: system
      args: []
      entry: |-
        bash -c '
          just githook-test-py "$0";
        '
      verbose: true
      stages: [ pre-commit ]

    - id: clean-nb-v
      name: Clean outputs from python notebooks
      description: |-
        This hook cleans python notebooks.
      files: '^notebooks/.*\.ipynb$'
      pass_filenames: true
      language: system
      args: []
      entry: |-
        bash -c '
          just githook-clean-ipynb-outputs "$0";
        '
      verbose: true
      stages: [ pre-commit ]

    - id: clean-nb-meta
      name: Clean metadata from python notebooks
      description: |-
        This hook cleans python notebooks.
      files: '^.*\.ipynb$'
      pass_filenames: true
      language: system
      args: []
      entry: |-
        bash -c '
          just githook-clean-ipynb-meta "$0";
        '
      verbose: true
      stages: [ pre-commit ]

  - repo: local
    hooks:

    - id: qa
      name: QA
      description: |-
        This hook performs QA on all files before a push.
      files: '.*'
      pass_filenames: false
      language: system
      args: []
      entry: |-
        bash -c '
          just githook-qa;
        '
      verbose: true
      stages: [ pre-push ]
